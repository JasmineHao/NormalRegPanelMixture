count = count + 1
ind.each <- subset(df,ciiu_3d==each.code)
ind.name <- ind.each$ciiu3d_descr[1]
ind.each$y <- log(ind.each$GO)
ind.each$lnm <- log(ind.each$WI)
ind.each$lnl <- log(ind.each$L)
ind.each$lnk <- log(ind.each$K)
desc.each <- ind.each[ind.each$L != 0 ,c("si","y","lnm","lnl","lnk")]
desc.each <- desc.each[complete.cases(desc.each),]
m.share <- cast(ind.each,id ~ year,value="si")#Collapse the dataframe into panel form , year against firm id
row.names(m.share) <- m.share$id
m.share
df <- read_dta("../../data/ChileanClean.dta")
ind.code <- unique(df$ciiu_3d)
desc.table = matrix(nc=5,nr=length(ind.code))
count = 0
ind.code <- unique(df$ciiu_3d)
ind.code
desc.table = matrix(nc=5,nr=length(ind.code))
count = 0
for (each.code in ind.code){
count = count + 1
ind.each <- subset(df,ciiu_3d==each.code)
ind.name <- ind.each$ciiu3d_descr[1]
ind.each$y <- log(ind.each$GO)
ind.each$lnm <- log(ind.each$WI)
ind.each$lnl <- log(ind.each$L)
ind.each$lnk <- log(ind.each$K)
desc.each <- ind.each[ind.each$L != 0 ,c("si","y","lnm","lnl","lnk")]
desc.each <- desc.each[complete.cases(desc.each),]
m.share <- cast(ind.each,id ~ year,value="si")#Collapse the dataframe into panel form , year against firm id
row.names(m.share) <- m.share$id
m.share <- m.share[,!(colnames(m.share)=="id")]
desc.table[count, ] <- c(ind.name,dim(desc.each)[1],dim(m.share)[1],round(mean(desc.each$si),2),round(sd(desc.each$si),2))
}
each.code
ind.code <- na.omit(unique(df$ciiu_3d))
desc.table = matrix(nc=5,nr=length(ind.code))
count = 0
for (each.code in ind.code){
count = count + 1
ind.each <- subset(df,ciiu_3d==each.code)
ind.name <- ind.each$ciiu3d_descr[1]
ind.each$y <- log(ind.each$GO)
ind.each$lnm <- log(ind.each$WI)
ind.each$lnl <- log(ind.each$L)
ind.each$lnk <- log(ind.each$K)
desc.each <- ind.each[ind.each$L != 0 ,c("si","y","lnm","lnl","lnk")]
desc.each <- desc.each[complete.cases(desc.each),]
m.share <- cast(ind.each,id ~ year,value="si")#Collapse the dataframe into panel form , year against firm id
row.names(m.share) <- m.share$id
m.share <- m.share[,!(colnames(m.share)=="id")]
desc.table[count, ] <- c(ind.name,dim(desc.each)[1],dim(m.share)[1],round(mean(desc.each$si),2),round(sd(desc.each$si),2))
}
colnames(desc.table) <- c("Industry","NObs", "N","Mean","Sd")
sink("../../results/Chilean/desc.table.txt")
getwd(
)
sink("../../results/Chile/desc.table.txt")
stargazer(desc.table,type="latex",title="Descriptive statistics for Chilean producer revenue share of intermediate material")
sink()
getwd()
ind.code <- c(331,382,332,384,352,342,369,381,321,313,341,322,390,311,351,324,356,312)
ind.count <- length(ind.code)
cl <- makeCluster(7)
count = 0
for (each.code in ind.code){
t <- Sys.time()
ind.each <- subset(df,ciiu_3d==each.code)
ind.name <- ind.each$ciiu3d_descr[1]
ind.each$y <- log(ind.each$GO)
ind.each$lnm <- log(ind.each$WI)
ind.each$lnl <- log(ind.each$L)
ind.each$lnk <- log(ind.each$K)
######################################################
# Describe the data
######################################################
desc.each <- ind.each[ind.each$L != 0 ,c("si","y","lnm","lnl","lnk")]
desc.each <- desc.each[complete.cases(desc.each),]
######################################################
# Select the data out
######################################################
m.share <- cast(ind.each,id ~ year,value="si")#Collapse the dataframe into panel form , year against firm id
row.names(m.share) <- m.share$id
m.share <- m.share[,!(colnames(m.share)=="id")]
T.cap <- dim(m.share)[2]
estimate.df <- matrix(0,nr=5,nc=5)
crit.df <- matrix(0,nr=5,nc=5)
result.df <- matrix(0,nr=5,nc=5)
# crit.df.boot <- matrix(0,nr=5,nc=5)
######################################################
#For cross-sectional data
######################################################
m.share.t <- m.share[,T.cap]
m.share.t <- m.share.t[complete.cases(m.share.t)]
N <- length(m.share.t)
for (M in 1:5){
out.h0 <- normalmixPMLE(y = m.share.t,m=M)
an <- normalregMix::anFormula(out.h0$parlist,M,N)
print(paste("T=",1,"M = ",M,"an=",an))
out.h1 <- normalmixMaxPhi(y=m.share.t,parlist = out.h0$parlist,an=an)
#Obtain critical value
lr.crit <- normalmixCrit(y=m.share.t,parlist = out.h0$parlist)$crit
crit.df[1,M] <- paste(round(lr.crit,2),collapse = ",")
# lr.crit.boot <- normalmixCritBoot(y=m.share.t,parlist = out.h0$parlist,parallel = FALSE,nbtsp = 200)$crit
# crif.df.boot[1,M] <- paste(round(lr.crit.boot,2),collapse = ",")
estimate.df[1,M] <- 2 * max(out.h1$penloglik - out.h0$loglik)
result.df[1,M] <- (2 * max(out.h1$penloglik - out.h0$loglik) > lr.crit[2])
}
######################################################
#For panel data
######################################################
for (T in 2:5){
t.start <- T.cap-T+1
t.seq <- seq(from=t.start,to=t.start+T-1)
m.share.t <- m.share[,t.seq]
data <- list(Y = t(m.share.t[complete.cases(m.share.t),]), X = NULL,  Z = NULL)
N <- dim(data$Y)[2]
for (M in 1:5){
out.h0 <- normalpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <- normalRegPanelMix::anFormula(out.h0$parlist,M,N,T)
print(paste("T=",T,"M = ",M,"an=",an))
if (is.na(an)){
an <- 1.0
}
out.h1 <- normalpanelmixMaxPhi(y=data$Y,parlist=out.h0$parlist,an=an,update.alpha = 1)
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
estimate.df[T,M] <- lr.estimate
lr.crit <- try(regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z, cl=cl,parallel = TRUE,nrep=1000)$crit)
if (class(lr.crit) == "try-error"){
lr.crit <- c(0,0,0)
}
crit.df[T,M] <- paste(round(lr.crit,2),collapse = ",")
# lr.crit <- regpanelmixCritBoot(y=data$Y, x=data$X, parlist=out.h0$parlist, nbtsp = 199 ,parallel = FALSE)$crit
# crit.df.boot[T,M] <- paste(round(lr.crit,2),collapse = ",")
}
###################################################################
#     Output
###################################################################
count = count + 1
print(Sys.time()-t)
print(paste(count,"/",ind.count))
colnames(estimate.df) <- c("M=1","M=2","M=3","M=4","M=5")
rownames(estimate.df) <- c("T=1","T=2","T=3","T=4","T=5")
colnames(crit.df) <- c("M=1","M=2","M=3","M=4","M=5")
rownames(crit.df) <- c("T=1","T=2","T=3","T=4","T=5")
sink("C:/Users/Jasmine/Dropbox/workspace/R/package/normalRegPanelMix-0.2/experiment/DataClean/Chilean/crit.txt",append=TRUE)
# stargazer(desc.each,type="text",title=paste("Descriptive data for Chilean Industry: ",ind.name))
# stargazer(estimate.df,type='text',title = paste("Columbian Producer Data: Estimated LR for ",ind.name))
# stargazer(result.df,title = ind.name)
stargazer(crit.df,type="text",title=paste("Simulated crit for ",ind.name,each.code))
sink()
}
# This script replicates table 7 and table 10 in the paper.
library(stargazer)
library(ggplot2)
library(reshape)
library(NormalRegPanelMixture)
library(normalregMix)
options(warn=-1)
ind_list <- c("Food","Textile", "Wood","Paper", "Chemical","Plastic","Ceramics","Steel","Othermetal",
"Metal product","Machine","Electronics",
"Transportation equipment","Precision instrument",
"Other")
df <- read.csv(file="../../data/data_production_function_missing2zero.csv")
df[df==0] <- NA
#Function
#source("C:/Users/Jasmine/Dropbox/GNR/R/productionEstimation.R")
df$t <- df$year
df <- df[order(df$id,df$t),]
ind12 <- subset(df,industry_2==12)
ind12 <- ind12[order(ind12$id,ind12$t),]
#Descriptive data for ind12
stargazer(ind12,type="text")
ind.code <- c(5 , 8 , 16 , 1 , 10 , 2 , 4 ,  9 , 13 , 14 , 15 , 11, 7 )
estimate.LR.df.1 <- matrix(0,nr=length(ind.code),nc=5)
rownames(estimate.LR.df.1) <- ind_list[ind.code]
colnames(estimate.LR.df.1) <- c("M=1","M=2","M=3","M=4","M=5")
estimate.LR.df.2 <- matrix(0,nr=length(ind.code),nc=5)
rownames(estimate.LR.df.2) <- ind_list[ind.code]
colnames(estimate.LR.df.2) <- c("M=1","M=2","M=3","M=4","M=5")
estimate.LR.df.3 <- matrix(0,nr=length(ind.code),nc=5)
rownames(estimate.LR.df.3) <- ind_list[ind.code]
colnames(estimate.LR.df.3) <- c("M=1","M=2","M=3","M=4","M=5")
estimate.LR.df.4 <- matrix(0,nr=length(ind.code),nc=5)
rownames(estimate.LR.df.4) <- ind_list[ind.code]
colnames(estimate.LR.df.4) <- c("M=1","M=2","M=3","M=4","M=5")
estimate.LR.df.5 <- matrix(0,nr=length(ind.code),nc=5)
rownames(estimate.LR.df.5) <- ind_list[ind.code]
colnames(estimate.LR.df.5) <- c("M=1","M=2","M=3","M=4","M=5")
count = 0
for (each.code in ind.code){
t <- Sys.time()
ind.each <- subset(df,industry_2==each.code)
ind.name <- ind_list[each.code]
# stargazer(ind.each,type="latex",title=paste("Descriptive data for ",ind.name, " industry in Japan"))
m.share <- cast(ind.each,id ~ year,value="lnmY_it")
row.names(m.share) <- m.share$id
m.share <- m.share[,!(colnames(m.share)=="id")]
T.cap <- dim(m.share)[2]
estimate.df <- matrix(0,nr=5,nc=5)
crit.df <- matrix(0,nr=5,nc=5)
crit.df.boot <- matrix(0,nr=5,nc=5)
######################################################
#For cross-sectional data
######################################################
m.share.t <- m.share[,T.cap]
m.share.t <- m.share.t[complete.cases(m.share.t)]
for (M in 1:5){
out.h0 <- normalmixPMLE(y = m.share.t,m=M)
an <- anFormula(out.h0$parlist,M,N,1)
out.h1 <- normalmixMaxPhi(y=m.share.t,parlist = out.h0$parlist,an=an)
# lr.crit <- normalmixCrit(y=m.share.t,parlist = out.h0$parlist)$crit
# crit.df[1,M] <- paste(round(lr.crit,2),collapse = ",")
estimate.df[1,M] <- 2 * max(out.h1$penloglik - out.h0$loglik)
}
}
for (each.code in ind.code){
t <- Sys.time()
ind.each <- subset(df,industry_2==each.code)
ind.name <- ind_list[each.code]
# stargazer(ind.each,type="latex",title=paste("Descriptive data for ",ind.name, " industry in Japan"))
m.share <- cast(ind.each,id ~ year,value="lnmY_it")
row.names(m.share) <- m.share$id
m.share <- m.share[,!(colnames(m.share)=="id")]
T.cap <- dim(m.share)[2]
estimate.df <- matrix(0,nr=5,nc=5)
crit.df <- matrix(0,nr=5,nc=5)
crit.df.boot <- matrix(0,nr=5,nc=5)
######################################################
#For cross-sectional data
######################################################
m.share.t <- m.share[,T.cap]
m.share.t <- m.share.t[complete.cases(m.share.t)]
######################################################
#For panel data
######################################################
for (T in 2:5){
t.start <- T.cap-T+1
t.seq <- seq(from=t.start,to=t.start+T-1)
m.share.t <- m.share[,t.seq]
data <- list(Y = t(m.share.t[complete.cases(m.share.t),]), X = NULL,  Z = NULL)
N <- dim(data$Y)[2]
for (M in 1:5){
out.h0 <- normalpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <- anFormula(out.h0$parlist,M,N,T)
out.h1 <- normalpanelmixMaxPhi(y=data$Y,parlist=out.h0$parlist,an=an,update.alpha = 1)
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
estimate.df[T,M] <- lr.estimate
lr.crit <- try(regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit)
if (class(lr.crit) == "try-error"){
lr.crit <- c(0,0,0)
}
crit.df[T,M] <- paste(round(lr.crit,2),collapse = ",")
regpanelmixMEMtest(y = data$Y,x=NULL,t=5,m=2,crit.method="none")
lr.crit <- regpanelmixCritBoot(y=data$Y, x=data$X, parlist=out.h0$parlist, nbtsp = 199 ,parallel = FALSE)$crit
crit.df.boot[T,M] <- paste(round(lr.crit,2),collapse = ",")
print(lr.estimate)
print(lr.crit)
}
}
colnames(estimate.df) <- c("M=1","M=2","M=3","M=4","M=5")
rownames(estimate.df) <- c("T=1","T=2","T=3","T=4","T=5")
colnames(crit.df) <- c("M=1","M=2","M=3","M=4","M=5")
rownames(crit.df) <- c("T=1","T=2","T=3","T=4","T=5")
# colnames(crit.df.boot) <- c("M=1","M=2","M=3","M=4","M=5")
# rownames(crit.df.boot) <- c("T=1","T=2","T=3","T=4","T=5")
count = count + 1
estimate.LR.df.1[count,] <- estimate.df[1,]
estimate.LR.df.2[count,] <- estimate.df[2,]
estimate.LR.df.3[count,] <- estimate.df[3,]
estimate.LR.df.4[count,] <- estimate.df[4,]
estimate.LR.df.5[count,] <- estimate.df[5,]
stargazer(estimate.df,title = paste("Estimate LR for ",ind.name))
# sink("C:/Users/haoja/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix-0.2/experiment/DataClean/Japan/crit.txt",append=TRUE)
# stargazer(crit.df,title=paste("estimate",each.code))
# sink()
# stargazer(crit.df.boot,title=paste("estimate",each.code))
print(paste(count,"/",length(ind.code)))
print(Sys.time()-t)
}
print("Done")
T
ind.code
ind.name
t.start <- T.cap-T+1
t.seq <- seq(from=t.start,to=t.start+T-1)
m.share.t <- m.share[,t.seq]
data <- list(Y = t(m.share.t[complete.cases(m.share.t),]), X = NULL,  Z = NULL)
N <- dim(data$Y)[2]
M
out.h0 <- normalpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <- anFormula(out.h0$parlist,M,N,T)
out.h1 <- normalpanelmixMaxPhi(y=data$Y,parlist=out.h0$parlist,an=an,update.alpha = 1)
out.h1
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
lr.estimate
T
ind.name
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <- 0.5 * anFormula(out.h0$parlist,M,N,T)
out.h1 <- normalpanelmixMaxPhi(y=data$Y,parlist=out.h0$parlist,an=an,update.alpha = 1)
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
lr.estimate
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <- 0.5 * anFormula(out.h0$parlist,M,N,T)
out.h1 <- normalpanelmixMaxPhi(y=data$Y,parlist=out.h0$parlist,an=an,update.alpha = 1)
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
lr.estimate
regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit
class(lr.crit) == "try-error"
data$Y
complete.cases(m.share.t)
m.share <- cast(ind.each,id ~ year,value="lnmY_it")
m.share
row.names(m.share) <- m.share$id
m.share <- m.share[,!(colnames(m.share)=="id")]
T.cap <- dim(m.share)[2]
estimate.df <- matrix(0,nr=5,nc=5)
crit.df <- matrix(0,nr=5,nc=5)
crit.df.boot <- matrix(0,nr=5,nc=5)
######################################################
#For cross-sectional data
######################################################
m.share.t <- m.share[,T.cap]
T = 2
t.start <- T.cap-T+1
t.seq <- seq(from=t.start,to=t.start+T-1)
t.seq
m.share.t <- m.share[,t.seq]
complete.cases(m.share.t)
data <- list(Y = t(m.share.t[complete.cases(m.share.t),]), X = NULL,  Z = NULL)
data$Y
data$Y.size
dim(data$Y)
m.share.t <- m.share[,t.seq]
data <- list(Y = t(m.share.t[complete.cases(m.share.t),]), X = NULL,  Z = NULL)
N <- dim(data$Y)[2]
N
each.code
ind.name
out.h0 <- normalpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <- anFormula(out.h0$parlist,M,N,T)
out.h0 <- normalpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <- 0.1 * anFormula(out.h0$parlist,M,N,T)
out.h1 <- normalpanelmixMaxPhi(y=data$Y,parlist=out.h0$parlist,an=an,update.alpha = 1)
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
lr.estimate
T
M
# phi = list(alpha = alpha,mu = mu,sigma = sigma, gamma = gamma,
#            beta = beta, N = N, T = T, M = M, p = p, q = q)
an <-  anFormula(out.h0$parlist,M,N,T)
out.h1 <- normalpanelmixMaxPhi(y=data$Y,parlist=out.h0$parlist,an=an,update.alpha = 1)
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
estimate.df[T,M] <- lr.estimate
lr.estimate
#lr.crit <- try(regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit)
#if (class(lr.crit) == "try-error"){
#  lr.crit <- c(0,0,0)
#}
lr.crit <- regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit
print(lr.crit)
getOption('nloptr.show.inequality.warning')
getOption('nloptr.show.inequality.warning') = FALSE
getOption('nloptr.show.inequality.warning') = -1
suppressWarnings()
#lr.crit <- try(regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit)
#if (class(lr.crit) == "try-error"){
#  lr.crit <- c(0,0,0)
#}
suppressWarnings(lr.crit <- regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit)
setOption('nloptr.show.inequality.warning',FALSE)
setOptions('nloptr.show.inequality.warning',FALSE)
setOptions('nloptr.show.inequality.warning',FALSE)
getOptions('nloptr.show.inequality.warning')
getOption('nloptr.show.inequality.warning')
getOption('nloptr.show.inequality.warning',FALSE)
getOption('nloptr.show.inequality.warning')
options()
op <- options(); str(op) # nicer printing
op
options(nloptr.show.inequality.warning)
options('nloptr.show.inequality.warning')
options('nloptr.show.inequality.warning'=FALSE)
lr.estimate <- 2 * max(out.h1$penloglik - out.h0$loglik)
estimate.df[T,M] <- lr.estimate
#lr.crit <- try(regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit)
#if (class(lr.crit) == "try-error"){
#  lr.crit <- c(0,0,0)
#}
lr.crit <- regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit
detectCores()
#lr.crit <- try(regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit)
#if (class(lr.crit) == "try-error"){
#  lr.crit <- c(0,0,0)
#}
lr.crit <- regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = TRUE,nrep=1000)$crit
#lr.crit <- try(regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=cl , parallel = FALSE,nrep=1000)$crit)
#if (class(lr.crit) == "try-error"){
#  lr.crit <- c(0,0,0)
#}
lr.crit <- regpanelmixCrit(y=data$Y, x=data$X, parlist=out.h0$parlist, z = data$Z,cl=NULL , parallel = TRUE,nrep=1000)$crit
knitr::opts_chunk$set(echo = TRUE)
# library(normalregMix)
library(NormalRegPanelMixture)
options('nloptr.show.inequality.warning'=FALSE)
#Generate Data
N <- 100 #Number of people
T <- 2 #Time periods, it's important that T > 1
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)), 'sigma' = sigma, 'gam' = gamma)
nrep = 1000
nrep <- 1000
lr.crit <- matrix(0,nr=nrep,ncol=3)
lr.estimate <- rep(0,nrep)
lr.estimate.pen <- rep(0,nrep)
ptm <- proc.time()
Data <- replicate(nrep,generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q))
for (k in 1:nrep){
data <- Data[,k]
lr.crit[k,] <- regpanelmixCrit(y=data$Y, x=data$X, parlist=parlist, z = data$Z,cl=NULL , parallel = FALSE,nrep=1000)$crit
out.h0 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
out.h1 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M+1,vcov.method = "none")
lr.estimate[k] <- out.h1$penloglik - out.h0$loglik
lr.estimate.pen[k] <- out.h1$penloglik - out.h0$penloglik
}
ptm <- proc.time()
Data <- replicate(nrep,generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q))
Data <- replicate(nrep,generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q))
for (k in 1:nrep){
data <- Data[,k]
out.h0 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
out.h1 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M+1,vcov.method = "none")
lr.estimate[k] <- out.h1$penloglik - out.h0$loglik
lr.estimate.pen[k] <- out.h1$penloglik - out.h0$penloglik
}
for (k in 1:nrep){
print(k)
data <- Data[,k]
out.h0 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
out.h1 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M+1,vcov.method = "none")
lr.estimate[k] <- out.h1$penloglik - out.h0$loglik
lr.estimate.pen[k] <- out.h1$penloglik - out.h0$penloglik
}
nrep <- 100
lr.crit <- matrix(0,nr=nrep,ncol=3)
lr.estimate <- rep(0,nrep)
lr.estimate.pen <- rep(0,nrep)
ptm <- proc.time()
Data <- replicate(nrep,generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q))
for (k in 1:nrep){
print(k)
data <- Data[,k]
out.h0 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M,vcov.method = "none")
out.h1 <- regpanelmixPMLE(y=data$Y,x=data$X, z = data$Z,m=M+1,vcov.method = "none")
lr.estimate[k] <- out.h1$penloglik - out.h0$loglik
lr.estimate.pen[k] <- out.h1$penloglik - out.h0$penloglik
}
tmp = regpanelmixCrit(y=data$Y, x=data$X, parlist=parlist, z = data$Z,cl=NULL , parallel = FALSE,nrep=1000)$crit
tmp = regpanelmixCrit(y=data$Y, x=data$X, parlist=parlist, z = data$Z,cl=NULL , parallel = FALSE,nrep=1000)$crit
for (k in 1:nrep){
lr.crit[k,] <- tmp
}
lr.estimate <- 2 * lr.estimate
lr.estimate.pen <- 2 * lr.estimate.pen
lr.estimate
print(proc.time() - ptm)
print(mean(lr.estimate > lr.crit[,1]))
print(mean(lr.estimate.pen > lr.crit[,1]))
print(mean(lr.estimate > lr.crit[,2]))
print(mean(lr.estimate.pen > lr.crit[,2]))
print(mean(lr.estimate > lr.crit[,3]))
print(mean(lr.estimate.pen > lr.crit[,3]))
out.h0$coefficients
# This script replicates table 7, 10, 11 - 14 in the paper.
library(stargazer)
library(ggplot2)
library(reshape)
library(NormalRegPanelMixture)
# library(normalregMix)
op <- options(); str(op) # nicer printing
options('nloptr.show.inequality.warning'=FALSE)
source("C:/Users/FBE/Desktop/NormalRegPanelMixture/experiment/EmpiricalTests/JapanTest.R", echo=TRUE)
library(stargazer)
library(ggplot2)
library(reshape)
# library(normalregMix)
library(foreign)
library(NormalRegPanelMixture)
df <- read_dta("data/ChileanClean.dta")
library(haven)
df <- read_dta("data/ChileanClean.dta")
